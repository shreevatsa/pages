#+TITLE: Notes on TeX
#+HTML_DOCTYPE: html5

* TeX and me
In my fascination for all things Knuthian, I have begun to take
another look at his programs TeX and METAFONT.

I did use LaTeX as an undergraduate and graduate student, but didn't
look into it very deeply, and seeing it anew from a historical (and
Knuth's) perspective is giving me new insights.

* What is TeX

"TeX is a two-dimensional list processor." (paraphrasing(?) Knuth)

"TeX's mission in life is to produce boxes." (paraphrasing(?) Knuth)

TeX is best understood and appreciated as a wrapper around an
[algorithm for breaking paragraphs into lines]. This algorithm
introduces a boxes-and-glue model of typesetting which turns out to be
unexpectedly powerful (suitable for setting things other than
paragraphs), and also includes some values of the parameters (the
default glue specifications) which are based on good typographic
practice.

The result is that output produced with TeX looks good.

* Reasons for using TeX

Good reasons for using TeX (as opposed to other contemporary systems):
quality and archival.

Quality:
 - It uses a great algorithm for breaking paragraphs into lines.
 - Its parameters encode some nuances of good typographic practice.

Archival:
 - Documents produced with TeX will produce the same output: they are
   fairly robust against changes in technology.

In practice, the /real/ reasons many people use TeX are rather
different, even silly:
 - You are an academic and it is what everyone uses.
 - You just want to generate PDFs (using TeX simply because it has a
   PDF output driver!)
 - You can "program" your document, blah blah blah (TeX's facilities
   for programming are absolutely horrible: writing elaborate macros
   in TeX (such as the entire LaTeX system) is a big mistake.

* LaTeX is a big mistake

LaTeX is a profound idea, but its implementation as a set of TeX
macros is a mistake. Today, Leslie Lamport would probably agree.

* History

Hot-metal typesetting -> phototypesetting -> digital typesetting

The task of typesetting is to take the author's "content" (their text, from, say, a manuscript) and lay it out on pages.

In 1977, the computer scientist Donald Knuth got the galley proofs for the second edition of Volume 2 of his life's work /The Art of Computer Programming/. The publisher had moved from hot-metal typesetting with Monotype machines to phototypesetting, and he did not like the results. He was very disappointed: [find exact quote] "How could I go on writing, if the results were going to be so ugly?" At the same time, he became aware that the quality (resolution) of yet another technology (digital typesetting) had advanced to the point where the results were indistinguishable from "real books". So he set out to solve the problem for himself.

He came up with a model of boxes and glue, whose elegance is often missed. It makes simple things easy and complex things possible -- its power was surprising even to its creator.

* What you can do with boxes and glue

#+BEGIN_QUOTE
A system based on three simple primitive concepts called ‘boxes’,
‘glue’, and ‘penalties’ provides the ability to deal satisfactorily
with a wide variety of typesetting problems in a unified framework,
using a single algorithm that determines optimum breakpoints.
#+END_QUOTE
(Knuth&Plass, from the abstract of BPiL.)

This page is not a TeX manual, but hopes to show the kind of things that the simple model makes possible. There is accompanying TeX code too (plain TeX, not LaTeX).

A mastery of the box-glue model is much more valuable than an intimate familiarity with the LaTeX package ecosystem.

No matter what complicated packages you use, ultimately all that TeX is doing is "breaking paragraphs into lines" according to the box-glue model.

[Write here]

Later, see also:
http://pragma-ade.com/articles/art-visi.pdf (read this -- informative but not very relevant right now, as we (I) don't want to visualize in the output itself with a visual language that needs to be learned, but "on the side". Also, want to do it not by overriding primitives but with independent Lua code)
https://tex.stackexchange.com/questions/2083/how-can-i-visualize-boxes

http://stackoverflow.com/questions/3089125/what-are-the-differences-between-the-css-and-latex-box-models
http://tex.stackexchange.com/questions/6461/why-couldnt-latexs-layout-model-be-as-simple-as-csss-layout-model/
http://tex.stackexchange.com/questions/70901/typesetting-limitations-of-latex
https://mailman.ntg.nl/pipermail/ntg-context/2008/031883.html ("I would say that TeX is a way in which a mathematician / theoretical...")
There's also a thread, not worth reading https://mailman.ntg.nl/pipermail/ntg-context/2008/031848.html (E.g. Aditya Mahajan refers to ant.)
But most of the comments by "Charles P. Schaum" are great.
http://forkable.eu/workshop/bag/Boxes_and_Glue.pdf
Probably not worth looking at?? https://www.math.utah.edu/~beebe/reports/2009/boxes.pdf
^ Most of these found via a Google search for [indesign boxes and glue].

See also exercises in this video around 40:00: https://www.youtube.com/watch?v=VkbucteDmWQ&list=PL94E35692EB9D36F3&index=7#t=524.969508
(Advanced TeXArcana, 2.)

* Generating TeX code

This is very cool: http://wiki.luatex.org/index.php/TeX_without_TeX

* Quote

“TeX was designed for typesetting, not for programming; so it is at best “weird” when considered as a programming language.” — DEK in “Mini-Indexes For Literate Programs” (page 235 of Digital Typography).

* Pre-TeX history

PUB: 1971/1972, at Stanford (Larry Tesler): http://www.nomodes.com/pub_manual.html

POX (Prototype Overlay Xerographics), formerly MRPP3, MRPP4: 197?, at Stanford (Maas): https://exhibits.stanford.edu/feigenbaum/catalog/qn081cx0251 (also root around in SAILDART)

eqn: 1975, at Bell Labs (Kernighan and Cherry): See CACM 1975 "A System for Typesetting Mathematics" (available online)

TEXDR.AFT (have annotations)


* Pre-METAFONT history?
Findfont: https://archive.org/details/findafont00brucrich

* Random links, sort later
http://petergallagher.com.au/index.php/site/article/the-longevity-of-plain-tex (random person)
* Multicore

> If so, is there any ongoing effort towards this goal in any of the popular projects?

Unfortunately, no. There are only four TeX engines of any notability at the moment:

* (Knuth) TeX (what you get when you run `tex`): No changes [will be made](http://www.tex.ac.uk/FAQ-TeXfuture.html) (since decades now) except for unambiguous bugs (and even there, some things that would be too radical to change have been rejected). Probably notable only for its historical importance and stability and for the fact that it's the basis (bulk of the code) of all other TeX engines; I imagine not many people other than Knuth use it any more (even users of the plain TeX format, already a minority, tend to use plain pdfTeX or plain XeTeX etc). The LaTeX format isn't even compatible with it anymore; since last year it assumes (eTeX) primitives not present in this engine.

* pdfTeX: Most widely used (what you get when you type `pdflatex`, `pdftex`, `latex`, etc.). As the most important engine, it is still actively maintained but not really under active development; mostly it was built in the 1990s and early 2000s by Hàn Thế Thành and others, as a modification of the plain TeX sources (`tex.web` turned into `pdftex.web`) for supporting PDF as an output format, then integrating the eTeX extensions. So it's stable at the moment.

* XeTeX: Used especially by those who need Unicode and OpenType fonts (and unbeatable for any nontrivial script), this is still under active development or maintenance but most of it has to do with the complexity of Unicode and fonts, and the features being added / changes being made are not of the sort you're asking.

* LuaTeX: The only one under *really* active development (including breaking things :P), adding lots of innovative and much-needed features, though it too has (finally) reached version 1.0 and their (already ambitious) [goals](http://www.luatex.org/roadmap.html) don't seem to extend as far as what you're asking in the question.

There are a bunch of other historical TeX implementations, for example eTeX was pretty important and most of it has been incorporated into the other engines, but it isn't even distributed with TeX Live for example (type `etex` and you get the pdfTeX binary). There's an archive of (some) other implementations [on CTAN](https://ctan.org/tex-archive/systems), all of which (examples: [A](https://tex.stackexchange.com/questions/385645/is-nts-new-typesetting-system-the-java-implementation-of-tex-usable-today/), [B](https://tex.stackexchange.com/questions/385490/how-to-run-cxtex/)) are obscure, and regarded as curiosities if at all. There are also new projects that get started from time to time, but rarely [get](https://tex.stackexchange.com/a/28680/48) [finished](https://tex.stackexchange.com/a/15234/48). (Also see another [recent answer](https://tex.stackexchange.com/a/398372/48) of mine on TeX implementations.) (Oh and there's also [Bakoma TeX](http://www.bakoma-tex.com/) which uses its own modified TeX program, but as it's neither free (~$100 for a year) nor open-source, it's hard to say much about it; we only have [hints](https://tex.stackexchange.com/questions/33615/why-can-bakoma-process-tex-files-so-fast/33642#comment918009_33642).)

-----

> Could (La)TeX processing be made faster by better exploiting the modern multicore processors, such as incorporating multithreading into one of the existing tex-processors?

Not by making changes “into one of the existing tex-processors” (for reasons mentioned above), but in principle yes, (La)TeX processing could certainly be made faster.

Firstly, it is worth noting that this is not straightforward.

(See [this question](https://tex.stackexchange.com/questions/157267/how-does-a-tex-engine-read-and-render-the-input-stream) (be sure to read *all* the answers) for levels even within the input processor, where the macro expansion processor “asks” the tokenizer for tokens, which in turn “asks” the buffered line-reader for characters.)

See also [this answer](https://tex.stackexchange.com/questions/398310/why-in-2017-does-latex-not-use-tree-like-structures/398372#398372) for the state of TeX development.

There's a little [here](https://tex.stackexchange.com/questions/384175/what-are-tokens-used-for/384494#384494) on why TeX is written like a compiler.
